require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example., :portfolio_id => portfolio.id, :net_position_id => net_position.id
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TransactionsController do

  let (:portfolio) { create :portfolio }
  let (:net_position) { create :net_position, :portfolio => portfolio }
  let (:transaction) { create :transaction, :net_position => net_position }
  let (:valid_attributes) { attributes_for :transaction, :net_position_id => net_position.id.to_s }

  describe "GET index" do
    it "assigns all transactions as @transactions" do
      get :index, :portfolio_id => portfolio.id, :net_position_id => net_position.id
      assigns(:transactions).should eq([transaction])
    end
  end

  describe "GET show" do
    it "assigns the requested transaction as @transaction" do
      get :show, :id => transaction.id.to_s, :portfolio_id => portfolio.id, :net_position_id => net_position.id
      assigns(:transaction).should eq(transaction)
    end
  end

  describe "GET new" do
    it "assigns a new transaction as @transaction" do
      get :new, :portfolio_id => portfolio.id, :net_position_id => net_position.id
      assigns(:transaction).should be_a_new(Transaction)
    end
  end

  describe "GET edit" do
    it "assigns the requested transaction as @transaction" do
      get :edit, :id => transaction.id.to_s, :portfolio_id => portfolio.id, :net_position_id => net_position.id
      assigns(:transaction).should eq(transaction)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Transaction" do
        expect {
          post :create, :transaction => valid_attributes, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        }.to change(Transaction, :count).by(1)
      end

      it "assigns a newly created transaction as @transaction" do
        post :create, :transaction => valid_attributes, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        assigns(:transaction).should be_a(Transaction)
        assigns(:transaction).should be_persisted
      end

      it "redirects to the created transaction" do
        post :create, :transaction => valid_attributes, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        response.should redirect_to(portfolio_net_position_transaction_path(portfolio, net_position, Transaction.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved transaction as @transaction" do
        # Trigger the behavior that occurs when invalid params are submitted
        Transaction.any_instance.stub(:save).and_return(false)
        post :create, :transaction => {}, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        assigns(:transaction).should be_a_new(Transaction)
      end

      pending "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Transaction.any_instance.stub(:save).and_return(false)
        post :create, :transaction => {}, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested transaction" do
        # Assuming there are no other transactions in the database, this
        # specifies that the Transaction created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Transaction.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => transaction.id, :transaction => {'these' => 'params'}, :portfolio_id => portfolio.id, :net_position_id => net_position.id
      end

      it "assigns the requested transaction as @transaction" do
        put :update, :id => transaction.id, :transaction => valid_attributes, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        assigns(:transaction).should eq(transaction)
      end

      it "redirects to the transaction" do
        put :update, :id => transaction.id, :transaction => valid_attributes, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        response.should redirect_to(portfolio_net_position_transaction_path(portfolio, net_position, transaction))
      end
    end

    describe "with invalid params" do
      it "assigns the transaction as @transaction" do
        # Trigger the behavior that occurs when invalid params are submitted
        Transaction.any_instance.stub(:save).and_return(false)
        put :update, :id => transaction.id.to_s, :transaction => {}, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        assigns(:transaction).should eq(transaction)
      end

      pending "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Transaction.any_instance.stub(:save).and_return(false)
        put :update, :id => transaction.id.to_s, :transaction => {}, :portfolio_id => portfolio.id, :net_position_id => net_position.id
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested transaction" do
      transaction
      expect {
        delete :destroy, :id => transaction.id.to_s, :portfolio_id => portfolio.id, :net_position_id => net_position.id
      }.to change(Transaction, :count).by(-1)
    end

    it "redirects to the transactions list" do
      delete :destroy, :id => transaction.id.to_s, :portfolio_id => portfolio.id, :net_position_id => net_position.id
      response.should redirect_to(portfolio_net_position_transactions_url(portfolio, net_position))
    end
  end

end
